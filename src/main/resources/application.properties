


spring.application.name=order-service
server.port=8085
spring.config.import=optional:configserver:http://localhost:8888
logging.level.org.springframework=DEBUG


spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=order_db
spring.jackson.default-property-inclusion=NON_NULL
#logging.level.ROOT=DEBUG  

eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka


#spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.producer.value-serializer=com.sanjib.edureka.ms_customer_service.KafkaSerializerOrder

spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id= 1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=com.sanjib.edureka.ms_customer_service.KafkaSerializerOrder

# For a local Redis instance
#spring.data.redis.host=localhost
#spring.data.redis.port=6379


# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0
management.otlp.tracing.endpoint=http://localhost:9411/api/v2/spans
management.endpoints.web.exposure.include=*

# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
